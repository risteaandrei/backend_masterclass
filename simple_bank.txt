1. Design DB schema and generate SQL code with dbdiagram.io
- dbdiagram.io
- pk, not null, default, note, ref, Indexes
- export to postgresql
- simple_bank.sql

2. Install & use Docker + Postgres + TablePlus to create DB schema
- docker pull postgres:12-alpine
- docker run --name postgres12 -p 5431:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=secret -d postgres:12-alpine
	- 5431 because 5432 is already used by local install of postgres

3. How to write & run database migration in Golang
- scoop install migrate
- mkdir -p db/migration
- migrate create -ext sql -dir db/migration -seq init_schema
	- ext: extension
	- dir: directory
	- seq: use -seq option to generate sequential up/down migrations with N digits
	- generates up/down migration files
- 000001_init_schema.up.sql
	- copy from simple_bank.sql
- 000001_init_schema.down.sql
	- drop tables entries, transfers, accounts (accounts last because of fk constraints)
- docker exec -it postgres12 ...
	- createdb --username=root --owner=root simple_bank -> create DB
	- psql -U root simple_bank -> access DB
- Makefile: createdb, dropdb, postgres (run pg container), migrateup, migratedown
- TablePlus: select simple_bank db
- migrate -path db/migration -database "postgresql://root:secret@localhost:5431/simple_bank?sslmode=disable" -verbose up

4. Generate CRUD golang code from SQL
- install latest version of go in wsl: https://go.dev/doc/install (linux version)
- clone sqlc https://github.com/kyleconroy/sqlc/
- cd cmd/sqlc && go build => sqlc binary
- https://github.com/kyleconroy/sqlc/tree/v1.4.0#settings
	- copy settings
	- adjust folders
- query/account.sql: add methods for account operations
	- CreateAccount, GetAccount, ListAccounts, UpdateAccount, DeleteAccount
- sqlc generate
	=> sqlc generated files
		- models.go: struct definitions from DB definition
		- db.go: DBTX interface; can pass sql.db (single query) or sql.tx (multi query transaction)
		- account.sql.go: CreateAccount method; name comes from account.sql comment
	- to fix errors shown by VS code: go mod init github.com/techschool/simplebank
- sqlc tags:
	:one - returns one element
	:many - returns slice of elements
	:exec - doesn't return elements

5. Write unit tests for database CRUD with random data in golang
- account_test.go: TestCreateAccount
	- tests: (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error)
	- requires DB connection, done in main_test.go
- main_test.go / TestMain
	- main entry point for unit tests inside a golang specific package
	- receives *testing.M (not *testing.T)
	- creates connection
- database/sql package provides only basic functionality, needs to work in conjunction with DB driver
	- go get github.com/lib/pq
	- import: _ "github.com/lib/pq"
- go get github.com/stretchr/testify
- util/random.go: create methods for random owner/money/currency
- go test -v -cover ./... -> to run all tests recursively
- create tests for account operations

6. A clean way to implement database transaction in Golang
- transactions, ACID
- BEGIN...COMMIT; BEGIN...ROLLBACK
- store.go
	- Store struct: to run db operations individually and in transactions
	- extends Queries functionality
- make db from main_test.go global, to use it in tests

7. DB transaction lock & how to handle deadlock in golang
- test without lock
	- docker exec -it postgres12 psql -U root simple_bank
	- BEGIN;
	- SELECT * FROM accounts WHERE id = 1;
	- do the same in other terminal
	- not locked
	- ROLLBACK
- to fix use
	- SELECT * FROM accounts WHERE id = 1 FOR UPDATE;
- now we have deadlock
- to add info to context
	- var txKey = struct{}{}
		- because context key should not be string (or any built in type)
		- variable of type empty struct
		- second bracket means we create the object
	- ctx := context.WithValue(context.Background(), txKey, txName)
	- txName := ctx.Value(txKey)
- https://wiki.postgresql.org/wiki/Lock_Monitoring
- to fix deadlock, use: FOR NO KEY UPDATE
- also can add in UPDATE operation without prior SELECT

8. How to avoid deadlock in DB transaction? Queries order matters
- do account1->account2 and account2->account1 transactions to obtain a deadlock
- to fix, always respect order of transactions (e.g. operate on lower id first)
- return without any parameters feature

9. Deeply understand transaction isolation & read phenomena
- ACID
	- Atomicity:   either all operations complete successfully, or transactions fails and db is unchanged
	- Consistency: db valid after transaction, all constraints satisfied
	- Isolation:   concurrent transactions don't affect each other
	- Durability:  data stored in persistent storage
- Isolation - Read Phenomena
	- dirty read:            read data by other concurrent uncommited transaction
	- non-repeatable read:   read same row twice, different value - modified by other commited transaction
	- phantom read:          re-execute query and find different set of rows - changes by other commited transaction (insert/delete)
	- serialization anomaly: group of concurrent commited transactions, impossible to achieve by running sequentially
- 4 Standard Isolation Levels (Low->High)
	- 1. read uncommited: can see data written by uncommited transaction (allows dirty read)
	- 2. read commited:   only see data written by commited transaction (dirty read not possible)
	- 3. repeatable read: same read query returns same result
	- 4. serializable:    can achieve same result if executed serially in some order
- set transaction isolation level
	- in postgres, it's per transaction, after BEGIN (as opposed to mysql, where it's per session)
- in postgres, read uncommited behaves like read commited => postgres has 3 isolation levels
- postgres throws error for concurrent update
- implement retry mechanism (for errors, timeouts, deadlocks)

10. Setup github actions for golang + postgres to run automated tests
- github actions: similar to jenkins, circle ci etc
- workflow
	- made up of several jobs
	- triggered by: event, schedule, manual
- runner
	- server running the job
	- for single job, can use github hosted
	- reports progress, logs, result
- job: steps to execute on same runner
- step
	- individual task, run serially within a job
	- contains actions
- action: standalone command
